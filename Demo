#include <iostream> // Necesario para Operadores de entrada y salida de datos
#include <conio.h> // Necesario para getch()
#include <cstdlib> // Necesario para system("cls")
#include <ctime> // Necesario para srand y rand
#include <windows.h> // Necesario para HideCursor
#include <string>

using namespace std;


const int width = 60; // Ancho del tablero
const int height = 25; // Alto del tablero
int posX = width / 2; // Posición inicial X del muñeco O
int posY = height / 2; // Posición inicial Y del muñeco O
const int numCharacters = 10; // Número total de muñecos

int Puntaje = 0; // Puntaje del jugador

string Espera = "Presiona cualquier tecla para continuar..."; // Tiempo de espera

void clearScreen() {
    system("cls");
}

void Drawboard_1(int board[height][width]) {
    // Inicializar el tablero con 1 (pared)
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
            board[i][j] = 1;
        }
    }

    // Crear un camino inicial en el laberinto
    for (int i = 1; i < height - 1; ++i) {
        board[i][1] = 0; // Crear un camino vertical en la segunda columna
    }
    for (int j = 1; j < width - 1; ++j) {
        board[height / 2][j] = 0; // Crear un camino horizontal en la fila central
    }

    // Generar aleatoriamente algunos caminos adicionales
    srand(time(0));
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
            if (rand() % 5 == 0) {
                board[i][j] = 0; // Crear caminos aleatorios
            }
        }
    }

    // Asegurar un camino en las posiciones de inicio y fin del muñeco
    board[1][1] = 0; // Punto de inicio
    board[height - 2][width - 2] = 0; // Punto de fin
}

void PrintBoard_1(int board[height][width]) {
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
            if (board[i][j] == 1) {
                cout << "#"; // Pared
            }
            else {
                cout << " "; // Camino
            }
        }
        cout << endl;
    }
}

void dibujarHeroe() {
    cout << "";
    cout << "";
    cout << "";
}

void gotoxy(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void Drawboard() {
    int board[height][width] = {0,0,0,0,0,0,0,00};
}

void PuntajeHeroe(int x, int y, int puntaje) {
    gotoxy(x, y);
    cout << puntaje;
}

void printGradually(const string& message, int delay) {
    for (char c : message) {
        cout << c << flush; // Asegura que el carácter se imprima inmediatamente
        Sleep(delay); // Retraso
    }
    cout << endl; // Salto de línea al final del mensaje
}

void printBlinkingText(const string& text) {
    while (true) {
        if (_kbhit()) {
            // Si se ha presionado una tecla, detener el parpadeo y salir del bucle
            break;
        }
        cout << text << flush; // Imprimir texto
        Sleep(500); // Retraso

        // Mover el cursor atrás y borrar el texto
        cout << "\033[1K\r" << flush; // Código de escape ANSI para borrar texto
        Sleep(500); // Retraso
    }
}

// Función para ocultar el cursor en la consola
void hideCursor() {
    // Estructura para almacenar la información del cursor
    CONSOLE_CURSOR_INFO cursorInfo;

    // Manejador de la consola
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);

    // Obtiene la información actual del cursor
    GetConsoleCursorInfo(consoleHandle, &cursorInfo);

    // Oculta el cursor estableciendo su visibilidad en false
    cursorInfo.bVisible = false;

    // Establece la información del cursor en la consola
    SetConsoleCursorInfo(consoleHandle, &cursorInfo);
}

void moveCharacter(char board[height][width], int& posY, int& posX) {
    int move = rand() % 4;
    switch (move) {
    case 0: if (board[posY - 1][posX] == ' ') posY--; break;
    case 1: if (board[posY][posX - 1] == ' ') posX--; break;
    case 2: if (board[posY + 1][posX] == ' ') posY++; break;
    case 3: if (board[posY][posX + 1] == ' ') posX++; break;
    }
}

void moveCharacters(char board[height][width], int posYChars[], int posXChars[]) {
    for (int i = 0; i < numCharacters; ++i) {
        moveCharacter(board, posYChars[i], posXChars[i]);
    }
}

void showPythagorasCuriousThings() {
    clearScreen();
    int input;
    cout << "Ingresa un numero del 1 al 7:" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
        cout << "Ahora un dato curioso sobre Pitagoras:" << endl;
    case 1:
        cout << "El 'Padre de los Numeros':" << endl;
        cout << "Sobre su atribucion como el 'Padre de los Numeros' debido a su fundamental contribucion a las matematicas." << endl;
        cout << "El famoso Teorema de Pitagoras se sigue ensenando hasta el dia de hoy." << endl;
        cout << "Sigue la Matematica con pasion en este mundo lleno de descubrimientos" << endl;
        break;
    case 2:
        cout << "Fundador de una Escuela Secreta:" << endl;
        cout << "Sobre su fundacion de una escuela en Crotona, donde sus seguidores, aprendian con el, Matematicas, Filosofía y Musica." << endl;
        cout << "La escuela funcionaba casi como una sociedad secreta con sus propios ritos y reglas." << endl;
        cout << "Aun tienes mucho por descubrir en este mundo de las Matematicas" << endl;
        break;
    case 3:
        cout << "Amor por la Musica:" << endl;
        cout << "Pitagoras creia que la Musica y las Matematicas estaban conectadas. Descubrio que las Matematicas podian representar tonos musicales." << endl;
        cout << "Este hallazgo se convirtio en la base de la teoria musical." << endl;
        cout << "¿Quien lo diria?, Pitagoras pudo ser cantante" << endl;
        break;
    case 4:
        cout << "Creencia en la Reencarnacion:" << endl;
        cout << "Pitagoras creia en la Reencarnacion, la idea del renacer, el alma entrando a un nuevo cuerpo." << endl;
        cout << "Pensaba que las almas podian reencarnar tanto en humanos como animales." << endl;
        cout << "Animate, podrias ser el siguiente Pitagoras" << endl;
        break;
    case 5:
        cout << "El Numero 10 como Sagrado:" << endl;
        cout << "Para Pitagoras y sus seguidores, el numero 10 era sagrado y perfecto." << endl;
        cout << "Lo representaban con un simbolo llamado tetraktys, que es un triangulo formado por diez puntos dispuestos en cuatro filas." << endl;
        cout << "Diez de diez" << endl;
        break;
    case 6:
        cout << "Primero en llamarse Filosofo:" << endl;
        cout << "Se le atribuye haber sido el primero en usar la palabra 'filosofo' para describirse a sí mismo." << endl;
        cout << "La historia detras de este término es interesante y revela mucho sobre la vision que Pitagoras tenía de la vida y el conocimiento." << endl;
        cout << "Bastante inspirador" << endl;
        break;
    case 7:
        cout << "Los Numeros Tienen Personalidades:" << endl;
        cout << "Pitagoras y sus seguidores creian que los numeros tenian personalidades y cualidades propias." << endl;
        cout << "Por ejemplo, pensaban que el numero 1 era masculino y creativo, mientras que el numero 2 era femenino y pasivo." << endl;
        cout << "¿Que numeros seriamos?" << endl;
        break;
    default:
        clearScreen();
        showPythagorasCuriousThings();
    }
    printBlinkingText(Espera);
    _getch();
}

void showPythagorasTheorem() {
    clearScreen();
    int input;
    cout << "Ingresa un numero del 1 al 7:" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
        cout << "Ahora un dato sobre la utilidad del Teorema de Pitagoras:" << endl;
    case 1:
        cout << "Hipotenusa:" << endl;
        cout << "La hipotenusa es siempre el lado opuesto al ángulo recto en un triangulo rectangulo y es el lado más largo." << endl;
        cout << "La formula a^2 + b^2 = c^2 permite calcular la longitud de la hipotenusa si se conocen las longitudes de los otros dos lados." << endl;
        cout << "¿Te imaginas cuantas veces ha sido usado el teorema?" << endl;
        break;
    case 2:
        cout << "No fue descubierto solo por Pitagoras:" << endl;
        cout << "Aunque el teorema lleva su nombre, hay evidencia de que el conocimiento de esta relacion matematica existia en otras culturas antiguas." << endl;
        cout << "Sin embargo, Pitagoras es a menudo acreditado con su primera demostracion formal." << endl;
        cout << "Vaya, el Teorema de Pitagoras, no provino de Pitagoras" << endl;
        break;
    case 3:
        cout << "Aplicaciones en la vida diaria:" << endl;
        cout << "El teorema de Pitagoras se utiliza en muchas areas practicas, como la construccion, la navegacion y la arquitectura." << endl;
        cout << "Por ejemplo, los arquitectos y constructores lo usan para asegurarse de que los angulos de las esquinas sean rectos." << endl;
        cout << "Tal vez, tu, futuro Ingeniero, lo vayas a necesitar" << endl;
        break;
    case 4:
        cout << "Relacion con los triangulos rectangulos:" << endl;
        cout << "El teorema de Pitágoras solo se aplica a los triangulos rectangulos, es decir, aquellos que tienen un angulo de 90 grados." << endl;
        cout << "La formula relaciona las longitudes de los lados del triangulo, donde c es la hipotenusa (el lado mas largo), y a y b son los otros lados" << endl;
        cout << "Util, ¿verdad?" << endl;
        break;
    case 5:
        cout << "Pruebas diversas:" << endl;
        cout << "Hay mas de 370 pruebas conocidas del teorema de Pitagoras, incluyendo algunas geometricas, algebraicas y por reducción al absurdo." << endl;
        cout << "Uno de los más famosos que ofrecio una prueba fue el presidente de los Estados Unidos, James Garfield." << endl;
        cout << "¿Podrias demostrarlo?" << endl;
        break;
    case 6:
        cout << "Pitagoricos y numeros enteros:" << endl;
        cout << "Los seguidores de Pitagoras, conocidos como los pitagoricos, estaban muy interesados en los numeros y descubrieron que en algunos triangulos rectangulos, los tres lados pueden ser numeros enteros." << endl;
        cout << "Estos conjuntos de numeros se conocen como triadas pitagoricas. Un ejemplo clasico es (3, 4, 5), donde 3^2 + 4^2 = 5^2 (9 + 16 = 25)" << endl;
        cout << "Muchos nos hemos convertido en Pitagoricos" << endl;
        break;
    case 7:
        cout << "Teorema inverso:" << endl;
        cout << "Si en un triangulo, el cuadrado de un lado es igual a la suma de los cuadrados de los otros dos lados." << endl;
        cout << "Entonces el triangulo es un triangulo rectangulo. Esto se utiliza a menudo para verificar si un triangulo es rectangulo." << endl;
        cout << "Hay mas utilidades del Teorema de Pitagoras" << endl;
        break;
    default:
        clearScreen();
        showPythagorasTheorem();
        return;
    }
    printBlinkingText(Espera);
    _getch();
}

void showPythagorasVectors() {
    clearScreen();
    int input;
    cout << "Ingresa un numero del 1 al 7:" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
        cout << "Ahora un dato sobre el Teorema de Pitagoras en los Vectores:" << endl;
    case 1:
        cout << "Magnitud de un Vector:" << endl;
        cout << "La magnitud (o longitud) de un vector V se puede encontrar utilizando el teorema de Pitagoras." << endl;
        cout << "La magnitud se calcula como: |V| = sqrt(V_x^2 + V_y^2)" << endl;
        cout << "Asi es como desarrollamos la magnitud de un vector" << endl;
        break;
    case 2:
        cout << "Distancia entre Dos Puntos:" << endl;
        cout << "El teorema de Pitagoras tambien se utiliza para calcular la distancia entre dos puntos en el plano. Si tienes dos puntos A(x_1, y_1) y B(x_2, y_2)." << endl;
        cout << "La distancia entre estos dos puntos se calcula como: |AB| = sqrt((x_2-x_1)^2 + (y_2-y_1)^2)" << endl;
        cout << "Ahora sabes mas sobre el el uso del Teorema de Pitagoras en vectores" << endl;
        break;
    case 3:
        cout << "Vectores en el Espacio:" << endl;
        cout << "Para un vector en el espacio tridimensional V = (V_x, V_y, V_z), el teorema se extiende de manera similar:" << endl;
        cout << "|V| = sqrt(V_x^2 + V_y^2 + V_z^2)" << endl;
        cout << "Una de las otras utilidades del Teorema de Pitagoras" << endl;
        break;
    case 4:
        cout << "Suma de Vectores:" << endl;
        cout << "Cuando sumamos dos vectores que son perpendiculares entre si, la magnitud del vector resultante se puede encontrar usando el teorema de Pitagoras." << endl;
        cout << "Si A y B son perpendiculares, R = A + B. La magnitud de R se puede calcular como: |R| = sqrt(|A|^2 + |B|^2)" << endl;
        cout << "Mas utilidades del Teorema de Pitagoras, sigue asi" << endl;
        break;
    case 5:
        cout << "Aplicaciones en Fisica:" << endl;
        cout << "En fisica, el teorema de Pitagoras es fundamental para resolver problemas relacionados con:" << endl;
        cout << "Desplazamiento, Fuerza Resultante, Velocidad y Aceleracion" << endl;
        cout << "Podemos medir ahora en la Fisica" << endl;
        break;
    case 6:
        cout << "Geometria y Trigonometria:" << endl;
        cout << "El teorema de Pitagoras es la base para muchas formulas trigonometricas y es utilizado para derivar las relaciones entre las funciones trigonometricas en un triangulo rectangulo." << endl;
        cout << "Ademas, se usa para resolver problemas en geometria analitica y algebra vectorial." << endl;
        cout << "El teorema de Pitagoras es profundo" << endl;
        break;
    case 7:
        cout << "Norma Euclidiana en el Espacio n-Dimensional" << endl;
        cout << "Para un vector V en un espacio n - dimensional, representado como V = (V_1, V_2, ... , V_n) la norma euclidiana se calcula extendiendo el teorema de Pitagoras a mas dimensiones" << endl;
        cout << "La formula general es: |V| = sqrt(V_1^2 + V_2^2 + ... + V_n^2)" << endl;
        cout << "Bastante utilizado en diferentes ramas del conocimiento" << endl;
        break;
    default:
        clearScreen();
        showPythagorasVectors();
    }
    printBlinkingText(Espera);
    _getch();
}

void showPythagorasTutorial_A() {
    clearScreen();
    int input;
    cout << "Ahora un Tutorial sobre Pitagoras" << endl;
    cout << "Selecciona que tutorial deseas:" << endl;
    cout << "1. Datos Curiosos sobre Pitagoras" << endl;
    cout << "2. Usos del Teorema de Pitagoras en el triangulo" << endl;
    cout << "3. El Teorema de Pitagoras en los vectores" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
    case 1: showPythagorasCuriousThings();
        break;
    case 2: showPythagorasTheorem();
        break;
    case 3: showPythagorasVectors();
        break;
    default: clearScreen(); showPythagorasTutorial_A();
    }
}

void showEquationsCuriousThings() {
    clearScreen();
    int input;
    cout << "Selecciona un numero del 1 al 7:" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
        cout << "Ahora un dato curioso sobre las ecuaciones:" << endl;
    case 1:
        cout << "Origen Antiguo" << endl;
        cout << "Las ecuaciones de primer grado tienen una historia muy antigua." << endl;
        cout << "Los babilonios ya resolvían ecuaciones lineales alrededor del 1900 a.C. utilizando metodos geometricos y aritmeticos." << endl;
        cout << "Hace mucho tiempo" << endl;
        break;
    case 2:
        cout << "Simplicidad y Versatilidad" << endl;
        cout << "A pesar de su simplicidad, las ecuaciones de primer grado son fundamentales en matematicas y ciencias." << endl;
        cout << "Pueden describir una amplia variedad de situaciones, desde problemas financieros hasta relaciones fisicas basicas." << endl;
        cout << "Hasta para calcular tus gastos" << endl;
        break;
    case 3:
        cout << "Representacion Grafica" << endl;
        cout << "En un sistema de coordenadas cartesianas, la grafica de una ecuación de primer grado con dos variables y = mx + b es una linea recta." << endl;
        cout << "Aquí, m representa la pendiente de la línea y b el punto donde la línea intercepta el eje y." << endl;
        cout << "Interesante ¿verdad?" << endl;
        break;
    case 4:
        cout << "Propiedades Importantes" << endl;
        cout << "La solución de una ecuacion de primer grado siempre es unica." << endl;
        cout << "Esto significa que para cualquier ecuacion de la forma ax + b = 0, siempre habra una unica solucion para x (si a es diferente de 0)." << endl;
        cout << "Sigue asi" << endl;
        break;
    case 5:
        cout << "Metodos de Resolucion" << endl;
        cout << "Las ecuaciones de primer grado pueden resolverse de varias maneras, incluyendo:" << endl;
        cout << "Despeje (mover terminos de un lado a otro para aislar la variable), Graficamente (interseccion de lineas) y metodo de igualacion, sustitucion y eliminacion." << endl;
        cout << "Ahora sabes la resolucion de ecuaciones" << endl;
        break;
    case 6:
        cout << "Aplicaciones Practicas" << endl;
        cout << "Se utilizan en finanzas para calcular intereses simples y compuestos. En fisica, para describir relaciones basicas como la velocidad constante (v = d/t)." << endl;
        cout << "En economia, para encontrar puntos de equilibrio entre oferta y demanda." << endl;
        cout << "Futuro Ingeniero, lo necesitaras" << endl;
        break;
    case 7:
        cout << "Simbolismo Historico" << endl;
        cout << "Los matematicos antiguos usaban diferentes metodos simbolicos para representar y resolver ecuaciones lineales." << endl;
        cout << "Por ejemplo, los arabes utilizaron el termino 'resto' para describir la ecuacion de balanceo, de ahi el termino 'al - jabr', que eventualmente evoluciono en la palabra 'algebra'." << endl;
        cout << "¿Sabes de donde deriva tu nombre?" << endl;
        break;
    default:
        clearScreen();
        showEquationsCuriousThings();
    }
    printBlinkingText(Espera);
    _getch();
}

void showEquationsUtility() {
    clearScreen();
    int input;
    cout << "Selecciona un numero del 1 al 7:" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
        cout << "Ahora un dato sobre la utilidad de las ecuaciones:" << endl;
    case 1:
        cout << "Modelado de Situaciones Reales" << endl;
        cout << "Las ecuaciones se utilizan para modelar y resolver problemas en diversas disciplinas como:" << endl;
        cout << "Fisica, quimica, biologia, economia y ingenieria." << endl;
        cout << "Bastante util" << endl;
        break;
    case 2:
        cout << "Prediccion y Pronostico" << endl;
        cout << "En economia, las ecuaciones ayudan a predecir tendencias de mercado y comportamientos financieros." << endl;
        cout << "Muchos utilizados a traves de modelos econometricos." << endl;
        cout << "Se pueden predecir muchas mas cosas" << endl;
        break;
    case 3:
        cout << "Optimizacion" << endl;
        cout << "En logistica y negocios, las ecuaciones se usan para optimizar rutas de transporte, produccion y distribucion." << endl;
        cout << "Minimizando costos y maximizando eficiencia." << endl;
        cout << "Vaya, deberiamos hacerlo" << endl;
        break;
    case 4:
        cout << "Ingenieria y Diseno" << endl;
        cout << "Los ingenieros utilizan ecuaciones para diseñar:" << endl;
        cout << "Estructuras, circuitos electricos, sistemas mecanicos y otros proyectos complejos." << endl;
        cout << "¡Puedes crear puentes, robots y mucho mas!" << endl;
        break;
    case 5:
        cout << "Medicina y Biologia" << endl;
        cout << "Las ecuaciones modelan:" << endl;
        cout << "La propagacion de enfermedades, el crecimiento de poblaciones celulares y la dinamica de sistemas biologicos." << endl;
        cout << "¡Ayuda a salvar vidas y descubrir curas!" << endl;
        break;
    case 6:
        cout << "Ciencias Sociales" << endl;
        cout << "Se emplean para analizar datos y hacer inferencias en sociologia, psicologia y ciencias politicas." << endl;
        cout << "Ayudando a entender y predecir comportamientos humanos y sociales." << endl;
        cout << "¡Descubre por que las personas hacen lo que hacen!" << endl;
        break;
    case 7:
        cout << "Tecnologia de la Informacion" << endl;
        cout << "En informatica, las ecuaciones se utilizan en algoritmos, criptografia y analisis de datos." << endl;
        cout << "Mejorando la eficiencia y seguridad de los sistemas informaticos." << endl;
        cout << "¡Imagina poder crear tu propio videojuego o una app increíble!" << endl;
        break;
    default:
        clearScreen();
        showEquationsUtility();
    }
    printBlinkingText(Espera);
    _getch();
}

void showEquationsHistory() {
    clearScreen();
    int input;
    cout << "Selecciona un numero del 1 al 7:" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
        cout << "Ahora un dato sobre la historia de las ecuaciones:" << endl;
    case 1:
        cout << "Babilonia" << endl;
        cout << "Los babilonios (alrededor de 2000 a.C.) resolvian ecuaciones cuadraticas y cubicas utilizando metodos aritmeticos y geometricos." << endl;
        cout << "Tambien desarrollaron tablas matematicas, como las de multiplicación y de logaritmos, que facilitaban sus calculos." << endl;
        cout << "¡Descubre como puedes desarrollar tus tablas!" << endl;
        break;
    case 2:
        cout << "Grecia Antigua" << endl;
        cout << "Euclides y Diofanto hicieron contribuciones significativas al algebra y a la teoria de ecuaciones en el siglo III a.C." << endl;
        cout << "Ademas, los griegos introdujeron el concepto de demostracion matematica formal, que sento las bases para el desarrollo de la geometria y el algebra." << endl;
        cout << "¡Animate, podrias sentar las bases de la era Revolucionaria!" << endl;
        break;
    case 3:
        cout << "Matematicos Arabes" << endl;
        cout << "Al-Juarismi, un matematico persa del siglo IX." << endl;
        cout << "Escribio un libro que sistematizo la resolucion de ecuaciones lineales y cuadraticas, dando origen a la palabra 'algebra'." << endl;
        cout << "Tal vez, tu siguiente libro sea un exito, ¡no lo dudes!" << endl;
        break;
    case 4:
        cout << "India" << endl;
        cout << "Matematicos como Brahmagupta (siglo VII) desarrollaron metodos para resolver ecuaciones indeterminadas y cuadraticas." << endl;
        cout << "Tambien introdujeron conceptos avanzados en aritmetica y algebra, como el uso del cero y las propiedades de los numeros negativos." << endl;
        cout << "Aprenderas mas cosas sobre los numeros" << endl;
        break;
    case 5:
        cout << "Edad Media" << endl;
        cout << "Los matematicos europeos como Fibonacci (siglo XIII) reintrodujeron el conocimiento arabe y griego en Europa, incluyendo la resolucion de ecuaciones." << endl;
        cout << "Este periodo tambien vio el desarrollo de la algebra simbolica y metodos avanzados de calculo que sentaron las bases para la revolucion matematica en los siglos posteriores." << endl;
        cout << "¡Probablemente crees una nueva secuencia de numeros!" << endl;
        break;
    case 6:
        cout << "Renacimiento" << endl;
        cout << "Durante el Renacimiento, matematicos italianos como Tartaglia y Cardano resolvieron ecuaciones cubicas y cuarticas" << endl;
        cout << "Expandiendo significativamente el campo del algebra." << endl;
        cout << "Bastante motivador" << endl;
        break;
    case 7:
        cout << "Siglo XIX" << endl;
        cout << "La teoria de Galois revoluciono la comprension de las ecuaciones polinomicas y su resolubilidad, sentando las bases para el algebra moderna." << endl;
        cout << "Este periodo tambien presencio avances significativos en el desarrollo de metodos computacionales y aplicaciones practicas de las matematicas en diversas disciplinas cientificas y tecnologicas." << endl;
        cout << "¡Ya cerca a nuestros tiempos!" << endl;
        break;
    default:
        clearScreen();
        showEquationsHistory();
    }
    printBlinkingText(Espera);
    _getch();
}

void showEquationsTutorial_X() {
    clearScreen();
    int input;
    cout << "Ahora un Tutorial sobre Ecuaciones" << endl;
    cout << "Selecciona que tutorial deseas:" << endl;
    cout << "1. Datos Curiosos sobre las Ecuaciones" << endl;
    cout << "2. Usos de las Ecuaciones" << endl;
    cout << "3. Historia de las ecuaciones" << endl;
    input = _getch() - '0'; // Convierte el caracter a entero
    switch (input) {
    case 1: showEquationsCuriousThings();
        break;
    case 2: showEquationsUtility();
        break;
    case 3: showEquationsHistory();
        break;
    default: clearScreen(); showEquationsTutorial_X();
    }
}

struct Challenge {
    string challengeText;
    string alternatives[3];
    int correctAnswer;
};


void askQuestion(const Challenge& challenge) {
    cout << challenge.challengeText << endl;
    cout << "Opciones:" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << i + 1 << ". " << challenge.alternatives[i] << endl;
    }

    int userChoice;
    while (true) {
        cout << "Ingresa tu respuesta (numero de opcion):" << endl;
        cout << "Si crees no estar listo omite el desafio presionando '0':" << endl;
        userChoice = _getch() - '0'; // Convertir carácter a entero

        if (userChoice == 0) {
            cout << "Desafio omitido." << endl;
            return;
        }
        else if (userChoice >= 1 && userChoice <= 3) {
            if (userChoice == challenge.correctAnswer) {
                cout << "¡Respuesta correcta!" << endl;
                Puntaje++; // Aumentamos el puntaje si la respuesta es correcta
            }
            else {
                cout << "Respuesta incorrecta. La respuesta correcta es la opcion: " << challenge.correctAnswer << endl;
                Puntaje--; // Disminuimos el puntaje si la respuesta es incorrecta
            }
            Sleep(1000);
            return; // Salir de la función después de una respuesta válida
        }
        else {
            cout << "Ingresa una opcion valida" << endl;
            Sleep(1000);
            clearScreen();
            cout << challenge.challengeText << endl;
            cout << "Opciones:" << endl;
            for (int i = 0; i < 3; ++i) {
                cout << i + 1 << ". " << challenge.alternatives[i] << endl;
            }
        }
    }
}

void showChallengePythagorasCuriousThings() {
    srand(time(0));
    clearScreen();

    // Definir desafíos sobre curiosidades de Pitágoras
    Challenge pythagorasChallenges[] = {
        {"¿Como es atribuido Pitagoras?",
         {"Pitagorico", "Padre de la biologia", "Padre de los numeros"},
         3},
        {"¿Donde fundo Pitagoras su escuela?",
         {"Venecia", "Crotona", "Roma"},
         2},
        {"¿Que relacion descubrio Pitagoras en la Matematica con la Musica?",
         {"La Matematicas tienen sus propias notas musicales", "Las Matematicas podian representar las ondas musicales", "Las Matematicas no se relacionan con la Musica"},
         2},
        {"¿En que creian Pitagoras y sus seguidores sobre sus almas?",
         {"En la inmortalidad", "En la resurreccion", "En la reencarnacion"},
         3},
        {"¿Que numeros Pitagoras y sus seguidores considerabam sagrado y perfecto?",
         {"10", "3", "7"},
         1},
        {"¿Como se autodenomino Pitagoras a si mismo?",
         {"Filosofo", "Amador", "Arquitecto"},
         1},
        {"¿Como consideraba Pitagoras al numero 1?",
        {"Inteligente y honesto", "Masculino y creativo", "Femenino y pasivo"},
        2},
    };

    int numChallenge = rand() % 7;
    cout << "Bien, escogiste un desafio sobre curiosidades de Pitagoras" << endl;
    cout << "Aqui esta el desafio aleatorio numero " << (numChallenge + 1) << ":" << endl;

    askQuestion(pythagorasChallenges[numChallenge]);
}

void showChallengePythagorasTheorem() {
    srand(time(0));
    clearScreen();

    // Definir desafíos sobre curiosidades de Pitágoras
    Challenge pythagorasChallenges[] = {
        {"¿En la formula a^2 + b^2 = c^2, que representa la c?",
         {"Diagonal", "Hipotenusa", "Cateto"},
         2},
        {"¿Fue Pitagoras el primero en descubrir 'El Teorema de Pitagoras'?",
         {"Si, fue Pitagoras", "No, antiguas civilizaciones ya lo habian descubierto", "No, fue Platon"},
         2},
        {"¿En que areas es usado el Teorema de Pitagoras?",
         {"Medicina", "Economia", "Navegacion"},
         3},
        {"¿Cuantos grados debe medir un angulo para ser considerado rectangulo?",
         {"90", "85", "45"},
         1},
        {"Aproximadamente, ¿cuantas pruebas hay del Teorema de Pitagoras?",
         {"Mas de 370", "Menos de 250", "Exactamente 600"},
         1},
        {"¿Como se denominaban a los seguidores de Pitagoras?",
         {"Academicos", "Delirantes", "Pitagoricos"},
         3},
        {"¿Como es usado el Teorema Inverso de Pitagoras?",
        {"Para conocer los angulos exteriores de un triangulo", "Para verificar si un triangulo es rectangulo", "Para verificar si un triangulo es escaleno"},
        2},
    };

    int numChallenge = rand() % 7;
    cout << "Bien, escogiste un desafio sobre curiosidades de Pitagoras" << endl;
    cout << "Aqui esta el desafio aleatorio numero " << (numChallenge + 1) << ":" << endl;

    askQuestion(pythagorasChallenges[numChallenge]);
}

void showChallengePythagorasVectors() {
    srand(time(0));
    clearScreen();

    // Definir desafíos sobre curiosidades de Pitágoras
    Challenge pythagorasChallenges[] = {
        {"¿Como se calcula la magnitud de un vector?",
         {"Restando la componente x con la y", "Sumando sus componentes y multiplicandolos por 6", "Raiz cuadrada de la suma de los cuadrados de sus componentex x y y"},
         3},
        {"¿Puede calcularse la distancia entre dos puntos en el plano cartesiano?",
         {"Solo en circulos", "Si, su magnnitud tambien", "No puede calcularse"},
         2},
        {"¿Podria calcular la distancia y magnitud en un vector en un plano tridimensional?",
         {"Si, anadiendo el cuadrado de su tercer componente z a la formula de la magnitud", "No, la formula funciona unicamente en el plano bidimensional", "Si, pero necesita ser modificado severamente"},
         1},
        {"Si un vector es perpendicular a otro, y sus magnitudes son '3' y '4', ¿cual es la magnitud de su vector resultante?",
         {"7", "5", "12"},
         2},
        {"¿Para que aplicaciones de la fisica es util el Teorema de Pitagoras?",
         {"La masa", "La gravedad", "La velocidad"},
         3},
        {"¿En que otras areas es utilizado el teorema de Pitagoras?",
         {"Aritmetica", "Finanzas", "Algebra Vectorial"},
         3},
        {"¿Como es llamado a la magnitud de n dimensiones derivado del Teorema de Pitagoras?",
        {"Basicismo", "Norma Neutral", "Norma Euclidiana"},
        3},
    };

    int numChallenge = rand() % 7;
    cout << "Bien, escogiste un desafio sobre curiosidades de Pitagoras" << endl;
    cout << "Aqui esta el desafio aleatorio numero " << (numChallenge + 1) << ":" << endl;

    askQuestion(pythagorasChallenges[numChallenge]);
}

void showPythagorasChallenge_W() {
    clearScreen();
    int input;
    cout << "¡Colisionaste con el muneco W!" << endl;
    cout << "Ahora un desafio sobre el Teorema de Pitagoras" << endl;
    cout << "Tendras alternativas en el primer mundo, pero asegurate de responder con la respuesta correcta" << endl;
    cout << "¿Sobre que tema deseas ser desafiado?" << endl;
    cout << "1. Desafio sobre datos Curiosos sobre Pitagoras" << endl;
    cout << "2. Desafio sobre el Teorema de Pitagoras" << endl;
    cout << "3. Desafio sobre el Teorema de Pitagoras en los vectores" << endl;
    input = _getch() - '0';
    switch (input) {
    case 1: showChallengePythagorasCuriousThings();
        break;
    case 2: showChallengePythagorasTheorem();
        break;
    case 3: showChallengePythagorasVectors();
        break;
    default: clearScreen(); showPythagorasChallenge_W();
    }
}

void showChallengeEquationsCuriousThings() {
    srand(time(0));
    clearScreen();

    // Definir desafíos sobre curiosidades de Pitágoras
    Challenge equationsChallenges[] = {
        {"¿Desde que años ya resolvian ecuaciones lineales?",
         {"Desde 900 a. C.", "Desde 1500 a. C.", "Desde 1900 a. C."},
         3},
        {"¿Donde son fundamentales las ecuaciones lineales?",
         {"En Psicologia", "En Informatica", "En Matematicas y Ciencias"},
         3},
        {"¿Como es la forma de la ecuacion de la recta?",
         {"y^2 = x^2 - b", "y = x^2 + x + b", "y = mx + b"},
         3},
        {"¿La ecuacion de primer grado tiene unica solucion?",
         {"Si, tiene unica solucion", "No tiene soluciones", "No, tiene 2 soluciones"},
         1},
        {"¿Cual de las siguientes alternativas es un metodo de resolucion de ecuaciones?",
         {"La potenciacion", "La sustitucion", "La diferencia"},
         2},
        {"¿En que area de laburo se usan las ecuaciones lineales para hallar la velocidad?",
         {"Fisica", "Economia", "Arquitectura"},
         1},
        {"¿De que palabra deriva la palabra 'Algebra'?",
        {"La palabra, no derivo", "Al - jabr", "Jabe-rra"},
        2},
    };

    int numChallenge = rand() % 7;
    cout << "Bien, escogiste un desafio sobre curiosidades de Pitagoras" << endl;
    cout << "Aqui esta el desafio aleatorio numero " << (numChallenge + 1) << ":" << endl;

    askQuestion(equationsChallenges[numChallenge]);
}

void showChallengeEquationsUtility() {
    srand(time(0));
    clearScreen();

    // Definir desafíos sobre curiosidades de Pitágoras
    Challenge equationsChallenges[] = {
        {"¿En que disciplinas el modelado de ecuaciones es util?",
         {"Gastronomia","Ingenieria", "Psicologia"},
         2},
        {"¿En la Economia, que predicen las ecuaciones?",
         {"Tasas de interes", "Eventos naturales", "Patrones migratorios"},
         1},
        {"En logistica y negocios, ¿para que son utilizadas las ecuaciones?",
         {"Para mejorar la satisfaccion del cliente", "Para aumentar la visibilidad de la marca", "Para optimizar rutas de transporte"},
         3},
        {"¿Para que los Ingenieros utilizan las ecuaciones?",
         {"Para modelar sistemas financieros", "Para analizar comportamientos de mercado", "Para diseñar estructuras"},
         3},
        {"¿Que modelan las ecuaciones en la Medicina y Biologia?",
         {"Modelan el dinamismo celular", "Predicen la propagacion de enfermedades", "Analizan el comportamiento de grupos sociales"},
         1},
        {"¿Para que se utilizan las ecuaciones en las Ciencias Sociales?",
         {"Para diseñar politicas publicas", "Para predecir comportamientos humanos", "Para estudiar fenomenos naturales"},
         2},
        {"¿Para que se utilizan las ecuaciones en los sistemas informaticos?",
         {"Para desarrollar estrategias de marketing", "Para entender el comportamiento del consumidor", "Para optimizar la eficiencia y funcionamiento"},
         3},
    };



    int numChallenge = rand() % 7;
    cout << "Bien, escogiste un desafio sobre curiosidades de Pitagoras" << endl;
    cout << "Aqui esta el desafio aleatorio numero " << (numChallenge + 1) << ":" << endl;

    askQuestion(equationsChallenges[numChallenge]);
}

void showChallengeEquationsHistory() {
    srand(time(0));
    clearScreen();

    // Definir desafíos sobre curiosidades de Pitágoras
    Challenge equationsChallenges[] = {
        {"¿Que desarrollaron los Babilonios en 2000 a.C.?",
         {"Tablas de division", "Tablas de multiplicar", "Tablas de suma"},
         2},
        {"¿Quienes introdujeron el concepto de demostracion matematica formal?",
         {"Los croatas", "Los fariseos", "Los griegos"},
         3},
        {"¿Quien fue el autor del libro que introdujo la palabra 'algebra'?",
         {"Al-Ahly", "Al-Kebab", "Al-Juarismi"},
         3},
        {"¿Quienes introdujeron soluciones a ecuaciones cuadraticas e indeterminadas?",
         {"Los Indios", "Los Americanos", "Los Italianos"},
         1},
        {"¿En que periodo se vio el desarrollo de la Algebra Simbolica?",
         {"Edad Media", "Pentateuco", "Era del Hielo"},
         1},
        {"¿Quien fue uno de los que desarrollo cuarticas y cubicas?",
         {"Isaac Newton", "Cardano", "Leonardo Davinci"},
         2},
        {"¿En que siglo la teoria de Galois revoluciono la Matematica?",
        {"Siglo XX", "Siglo XIX", "Siglo XXI"},
        2},
    };

    int numChallenge = rand() % 7;
    cout << "Bien, escogiste un desafio sobre curiosidades de Pitagoras" << endl;
    cout << "Aqui esta el desafio aleatorio numero " << (numChallenge + 1) << ":" << endl;

    askQuestion(equationsChallenges[numChallenge]);
}

void showEquationsChallenge_K() {
    clearScreen();
    int input;
    cout << "¡Colisionaste con el muneco K!" << endl;
    cout << "Ahora un desafio sobre las Ecuaciones" << endl;
    cout << "Tendras alternativas en el primer mundo, pero asegurate de responder con la respuesta correcta" << endl;
    cout << "¿Sobre que tema deseas ser desafiado?" << endl;
    cout << "1. Desafio sobre datos Curiosos sobre Ecuaciones" << endl;
    cout << "2. Desafio sobre la Utilidad de las Ecuaciones" << endl;
    cout << "3. Desafio sobre la Historia de las Ecuaciones" << endl;
    input = _getch() - '0';
    switch (input) {
    case 1: showChallengeEquationsCuriousThings();
        break;
    case 2: showChallengeEquationsUtility();
        break;
    case 3: showChallengeEquationsHistory();
        break;
    default: clearScreen(); showEquationsChallenge_K();
    }
}

int main() {
    hideCursor();

    // Posiciones iniciales de los muñecos A
    int posXChars_A[numCharacters] = { 10, 20, 30, 5, 15, 25, 35, 5, 15, 25 };
    int posYChars_A[numCharacters] = { 5, 10, 15, 5, 10, 15, 5, 15, 5, 15 };

    // Posiciones iniciales de los muñecos X
    int posXChars_X[numCharacters] = { 8, 18, 28, 3, 13, 23, 33, 8, 18, 28 };
    int posYChars_X[numCharacters] = { 3, 8, 13, 3, 8, 13, 3, 13, 3, 13 };

    // Posiciones iniciales de los muñecos W
    int posXChars_W[numCharacters] = { 6, 14, 22, 4, 12, 20, 28, 10, 18, 26 };
    int posYChars_W[numCharacters] = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };

    // Posiciones iniciales de los muñecos K
    int posXChars_K[numCharacters] = { 4, 14, 24, 3, 13, 23, 33, 8, 18, 28 };
    int posYChars_K[numCharacters] = { 1, 6, 11, 1, 6, 11, 1, 11, 1, 11 };

    char board[height][width]; // Tablero de juego

    // Inicializamos el tablero con espacios en blanco y bordes
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
            // Dibujar bordes
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1)
                board[i][j] = '#'; // Carácter para el borde
            else
                board[i][j] = ' '; // Espacio en blanco para el interior
        }
    }

    // Añadir obstáculos al tablero
    srand(time(0));
    int numObstacles = 400; // Número de obstáculos
    for (int i = 0; i < numObstacles; ++i) {
        int obsX, obsY;
        bool validPosition;
        do {
            obsX = rand() % (width - 2) + 1; // Generar coordenada X aleatoria dentro del tablero
            obsY = rand() % (height - 2) + 1; // Generar coordenada Y aleatoria dentro del tablero
            validPosition = true;
            // Verificar que la posición no sea la inicial del muñeco O ni de otros muñecos
            if (obsX == posX && obsY == posY) {
                validPosition = false;
            }
            else {
                for (int j = 0; j < numCharacters; ++j) {
                    if ((obsX == posXChars_A[j] && obsY == posYChars_A[j]) ||
                        (obsX == posXChars_X[j] && obsY == posYChars_X[j]) ||
                        (obsX == posXChars_W[j] && obsY == posYChars_W[j]) ||
                        (obsX == posXChars_K[j] && obsY == posYChars_K[j])) {
                        validPosition = false;
                        break;
                    }
                }
            }
        } while (!validPosition || board[obsY][obsX] != ' '); // Asegurarse de que el obstáculo no se coloque sobre otro obstáculo o muñeco
        board[obsY][obsX] = '#'; // Carácter para el obstáculo
    }

    while (true) {

        // Dibujamos los muñecos A, X, W y K en el tablero
        for (int i = 0; i < numCharacters; ++i) {
            board[posYChars_A[i]][posXChars_A[i]] = 'A';
            board[posYChars_X[i]][posXChars_X[i]] = 'X';
            board[posYChars_W[i]][posXChars_W[i]] = 'W';
            board[posYChars_K[i]][posXChars_K[i]] = 'K';
        }

        // Dibujamos al muñeco O en el tablero
        board[posY][posX] = 'O';

        // Limpiamos la pantalla
        system("cls");

        // Imprimimos el tablero
        for (int i = 0; i < height; ++i) {
            for (int j = 0; j < width; ++j) {
                cout << board[i][j] << " ";
            }
            cout << endl;
        }

        // Limpiamos las posiciones anteriores de los muñecos en el tablero
        for (int i = 0; i < numCharacters; ++i) {
            board[posYChars_A[i]][posXChars_A[i]] = ' ';
            board[posYChars_X[i]][posXChars_X[i]] = ' ';
            board[posYChars_W[i]][posXChars_W[i]] = ' ';
            board[posYChars_K[i]][posXChars_K[i]] = ' ';
        }
        board[posY][posX] = ' ';

        moveCharacters(board, posYChars_A, posXChars_A);
        moveCharacters(board, posYChars_X, posXChars_X);
        moveCharacters(board, posYChars_W, posXChars_W);
        moveCharacters(board, posYChars_K, posXChars_K);

        char input;
        // Capturamos la entrada del usuario
        input = toupper(_getch());

        // Movemos al muñeco O según la entrada, asegurándonos de no colisionar con los bordes ni con los obstáculos
        switch (input) {
        case 'W':
            if (posY > 1 && board[posY - 1][posX] == ' ') posY--; // Mover arriba si no está en el borde superior o hay un obstáculo
            break;
        case 'A':
            if (posX > 1 && board[posY][posX - 1] == ' ') posX--; // Mover izquierda si no está en el borde izquierdo o hay un obstáculo
            break;
        case 'S':
            if (posY < height - 2 && board[posY + 1][posX] == ' ') posY++; // Mover abajo si no está en el borde inferior o hay un obstáculo
            break;
        case 'D':
            if (posX < width - 2 && board[posY][posX + 1] == ' ') posX++; // Mover derecha si no está en el borde derecho o hay un obstáculo
            break;
        }

        // Verificar si el muñeco O está en la posición de algún muñeco A o X para mostrar tutoriales
        for (int i = 0; i < numCharacters; ++i) {
            if (posX == posXChars_A[i] && posY == posYChars_A[i]) {
                showPythagorasTutorial_A();
            }
            if (posX == posXChars_X[i] && posY == posYChars_X[i]) {
                showEquationsTutorial_X();
            }
            if (posX == posXChars_W[i] && posY == posYChars_W[i]) {
                showPythagorasChallenge_W();
            }
            if (posX == posXChars_K[i] && posY == posYChars_K[i]) {
                showEquationsChallenge_K();
            }
        }
    }

    return 0;
}
